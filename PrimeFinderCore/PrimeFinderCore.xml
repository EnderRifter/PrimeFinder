<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PrimeFinderCore</name>
    </assembly>
    <members>
        <member name="T:PrimeFinderCore.IBatch`2">
            <summary>
            Represents a strongly typed batch of computation that can be offloaded to a separate compute unit.
            </summary>
            <typeparam name="TInput">The type of object this batch accepts as an input.</typeparam>
            <typeparam name="TOutput">The type of object this batch produces as an output.</typeparam>
        </member>
        <member name="P:PrimeFinderCore.IBatch`2.Input">
            <summary>
            The input to this batch. Should only be set during the constructor method or similar.
            </summary>
        </member>
        <member name="P:PrimeFinderCore.IBatch`2.IsCompleted">
            <summary>
            Whether this batch has been completed.
            </summary>
        </member>
        <member name="P:PrimeFinderCore.IBatch`2.Output">
            <summary>
            The output of this batch. Should only be read after <see cref="P:PrimeFinderCore.IBatch`2.IsCompleted"/> is set.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.IBatch`2.Process">
            <summary>
            Processes the batch. After this call completes, <see cref="P:PrimeFinderCore.IBatch`2.IsCompleted"/> should have a value of <c>true</c>.
            </summary>
        </member>
        <member name="T:PrimeFinderCore.PrimeBounds">
            <summary>
            Represent a set of bounds that should be checked for prime numbers.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.PrimeBounds.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimeFinderCore.PrimeBounds"/> struct.
            </summary>
        </member>
        <member name="T:PrimeFinderCore.PrimeFinderBatch">
            <summary>
            Represents a batch of numbers that should be searched for primes.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.PrimeFinderBatch.#ctor(PrimeFinderCore.PrimeBounds)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimeFinderCore.PrimeFinderBatch"/> struct.
            </summary>
            <param name="bounds">The bounds that should be searched for primes.</param>
        </member>
        <member name="P:PrimeFinderCore.PrimeFinderBatch.Input">
            <inheritdoc />
        </member>
        <member name="P:PrimeFinderCore.PrimeFinderBatch.IsCompleted">
            <inheritdoc />
        </member>
        <member name="P:PrimeFinderCore.PrimeFinderBatch.Output">
            <inheritdoc />
        </member>
        <member name="M:PrimeFinderCore.PrimeFinderBatch.CheckPrime(System.UInt64)">
            <summary>
            Checks whether the given number is prime.
            </summary>
            <param name="number">The number to check.</param>
            <returns>Whether the given number is prime or not.</returns>
        </member>
        <member name="M:PrimeFinderCore.PrimeFinderBatch.Process">
            <inheritdoc />
        </member>
        <member name="F:PrimeFinderCore.Program.batcher">
            <summary>
            Allows for work to be done in parallel.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.Program.BatcherThreadCount">
            <summary>
            The number of threads that should batch out work to the worker threads.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.Program.MergerThreadCount">
            <summary>
            The number of threads that should collate completed batches from the worker threads.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.Program.WorkerThreadCount">
            <summary>
            The number of threads that should process batches.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.Program.#cctor">
            <summary>
            Initialises a new instance of the <see cref="T:PrimeFinderCore.Program"/> class.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.Program.CollateBatch(PrimeFinderCore.IBatch{PrimeFinderCore.PrimeBounds,System.UInt64[]},PrimeFinderCore.SinkState)">
            <summary>
            Collates processed batches into the final <see cref="T:PrimeFinderCore.SinkState"/> instance.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.Program.GenerateBatch(System.Int32,PrimeFinderCore.SourceState)">
            <summary>
            Generates <see cref="T:PrimeFinderCore.PrimeFinderBatch"/> instances to be computed.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.Program.ProcessBatch(PrimeFinderCore.IBatch{PrimeFinderCore.PrimeBounds,System.UInt64[]},PrimeFinderCore.WorkerState)">
            <summary>
            Processes <see cref="T:PrimeFinderCore.PrimeFinderBatch"/> instances using the Sieve of Eratosthenes.
            </summary>
        </member>
        <member name="T:PrimeFinderCore.SinkState">
            <summary>
            Sink thread state object. Used to merge batches into one final output list.
            </summary>
        </member>
        <member name="T:PrimeFinderCore.SourceState">
            <summary>
            Source thread state object. Used to create batches.
            </summary>
        </member>
        <member name="T:PrimeFinderCore.WorkerState">
            <summary>
            Worker thread state object. Empty for now.
            </summary>
        </member>
        <member name="T:PrimeFinderCore.ThreadedBatcher`2">
            <summary>
            Provides methods to split work apart into batches, to be processed in parallel on separate threads.
            </summary>
            <typeparam name="TInput">The type of object that will be assigned as the input for each batch.</typeparam>
            <typeparam name="TOutput">The type of object that will be assigned as the output for each batch.</typeparam>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.pendingBatches">
            <summary>
            Holds batches that are awaiting processing.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.processedBatches">
            <summary>
            Holds batches that are awaiting being merged into the output.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.sinkThreadCompletionMap">
            <summary>
            Maps a <see cref="T:System.Threading.Thread"/> instance to a <see cref="T:System.Boolean"/> determining whether or not it has finished.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.sinkThreads">
            <summary>
            Holds the sink threads that we will use to collate completed batches.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.sourceThreadCompletionMap">
            <summary>
            Maps a <see cref="T:System.Threading.Thread"/> instance to a <see cref="T:System.Boolean"/> determining whether or not it has finished.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.sourceThreads">
            <summary>
            Holds the source threads that we will use to dispense batches to the worker threads.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.stopwatch">
            <summary>
            The stopwatch to use to measure elapsed time.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.threadCancellationToken">
            <summary>
            The cancellation token used to abort the managed threads, should the <see cref="M:PrimeFinderCore.ThreadedBatcher`2.Cancel"/> method be called.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.threadCancellationTokenSource">
            <summary>
            Provides cancellation tokens to abort the managed threads, should the <see cref="M:PrimeFinderCore.ThreadedBatcher`2.Cancel"/> method be called.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.workerThreadCompletionMap">
            <summary>
            Maps a <see cref="T:System.Threading.Thread"/> instance to a <see cref="T:System.Boolean"/> determining whether or not it has finished.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.workerThreads">
            <summary>
            Holds the worker threads that we will use for processing batches.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.canSinkThreadsRun">
            <summary>
            Whether the sink threads should be currently active.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.canSourceThreadsRun">
            <summary>
            Whether the source threads should be currently active.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.canWorkerThreadsRun">
            <summary>
            Whether the worker threads should be currently active.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimeFinderCore.ThreadedBatcher`2"/> class.
            </summary>
            <param name="sourceThreadCount">
            The number of 'source' threads that should be used to distribute batches to worker threads.
            </param>
            <param name="workerThreadCount">
            The number of 'worker' threads that should be used to process pending batches.
            </param>
            <param name="sinkThreadCount">
            The number of 'sink' threads that should be used to collate finished batches from worker threads.
            </param>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.Finalize">
            <summary>
            Destroys a <see cref="T:PrimeFinderCore.ThreadedBatcher`2"/> instance.
            </summary>
        </member>
        <member name="T:PrimeFinderCore.ThreadedBatcher`2.ProcessThreadWorkDelegate`1">
            <summary>
            Delegate method that should be executed by each 'worker' thread for each available batch.
            If a <see cref="T:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch"/> instance is encountered, this method will NOT be invoked.
            </summary>
            <typeparam name="TWorkerState">
            The type of object that will be passed to each 'worker' thread, functioning as a common state object. Since this
            object will be accessed by many threads, it should contain adequate synchronisation.
            </typeparam>
            <param name="batchToProcess">The new batch which should be processed.</param>
            <param name="commonWorkerState">Optional state that should be made common to every 'worker' thread.</param>
        </member>
        <member name="T:PrimeFinderCore.ThreadedBatcher`2.SinkThreadWorkDelegate`1">
            <summary>
            Delegate method that should be executed by each 'sink' thread to handle each incoming processed batch.
            If a <see cref="T:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch"/> instance is encountered, this method will NOT be invoked.
            </summary>
            <typeparam name="TSinkState">
            The type of object that will be passed to each 'sink' thread, functioning as a common state object. Since this
            object will be accessed by many threads, it should contain adequate synchronisation.
            </typeparam>
            <param name="completedBatch"></param>
            <param name="commonSinkState">Optional state that should be made common to every 'sink' thread.</param>
        </member>
        <member name="T:PrimeFinderCore.ThreadedBatcher`2.SourceThreadWorkDelegate`1">
            <summary>
            Delegate method that should be executed by each 'source' thread to generate new batches for the 'worker' threads.
            </summary>
            <typeparam name="TSourceState">
            The type of object that will be passed to each 'source' thread, functioning as a common state object. Since this
            object will be accessed by many threads, it should contain adequate synchronisation.
            </typeparam>
            <param name="sourceThreadId">The current 'source' thread id (unique to each thread).</param>
            <param name="commonSourceState">Optional state that should be made common to every 'source' thread.</param>
            <returns>
            The newly generated batch for the 'worker' threads.
            Should return a <see cref="T:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch"/> instance when no more batches can be generated.
            </returns>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.ProcessThreadWork``2(System.Object)">
            <summary>
            The work delegate method for each 'worker' thread.
            </summary>
            <param name="obj">The optional shared state parameter.</param>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.SinkThreadWork``2(System.Object)">
            <summary>
            The work delegate method for each 'sink' thread.
            </summary>
            <param name="obj">The optional shared state parameter.</param>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.SourceThreadWork``2(System.Object)">
            <summary>
            The work delegate method for each 'source' thread.
            </summary>
            <param name="obj">The optional shared state parameter.</param>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.Dispose(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.IDisposable"/> interface, available to subclasses.
            </summary>
            <param name="disposing">
            Whether this method is being called by the <see cref="M:PrimeFinderCore.ThreadedBatcher`2.Dispose"/> method, before this object is being finalized.
            </param>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.Cancel">
            <summary>
            Stops all of the managed threads. Blocks.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.Initialise``3(PrimeFinderCore.ThreadedBatcher{`0,`1}.SourceThreadWorkDelegate{``0},``0,PrimeFinderCore.ThreadedBatcher{`0,`1}.ProcessThreadWorkDelegate{``1},``1,PrimeFinderCore.ThreadedBatcher{`0,`1}.SinkThreadWorkDelegate{``2},``2)">
            <summary>
            Initialises and starts the managed 'source', 'worker', and 'sink' threads.
            </summary>
            <typeparam name="TSourceState">
            The type of object that will be passed to each 'source' thread, functioning as a common state object. Since this
            object will be accessed by many threads, it should contain adequate synchronisation.
            </typeparam>
            <typeparam name="TWorkerState">
            The type of object that will be passed to each 'worker' thread, functioning as a common state object. Since this
            object will be accessed by many threads, it should contain adequate synchronisation.
            </typeparam>
            <typeparam name="TSinkSate">
            The type of object that will be passed to each 'sink' thread, functioning as a common state object. Since this
            object will be accessed by many threads, it should contain adequate synchronisation.
            </typeparam>
            <param name="sourceWorkDelegate">
            The method that should be executed by each 'source' thread to generate new batches for the 'worker' threads.
            Takes the current 'source' thread id (unique to each thread), and should return a <see cref="T:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch"/>
            instance when no more batches can be generated.
            </param>
            <param name="initialSourceState">
            Optional state that should be made common to every 'source' thread.
            </param>
            <param name="batchProcessDelegate">
            The method that should be executed by each 'worker' thread for each available batch. If a <see cref="T:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch"/>
            instance is encountered, this method will NOT be invoked.
            </param>
            <param name="initialWorkerState">
            Optional state that should be made common to every 'worker' thread.
            </param>
            <param name="sinkWorkDelegate">
            The method that should be executed by each 'sink' thread to handle each incoming processed batch.
            If a <see cref="T:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch"/> instance is encountered, this method will NOT be invoked.
            </param>
            <param name="initialSinkSate">
            Optional state that should be made common to every 'sink' thread.
            </param>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.UntilFinished(System.Nullable{System.TimeSpan})">
            <summary>
            Waits until all of the 'source', 'worker', and 'sink' threads join back into the main process. At that point,
            the custom 'sink' thread state should be in its final state. Returns the number of elapsed milliseconds. Blocks.
            </summary>
            <param name="timeout">
            The timespan after which this method call should timeout. If <c>null</c>, this call will never timeout.
            </param>
            <returns>The number of milliseconds that elapsed during batch processing.</returns>
        </member>
        <member name="T:PrimeFinderCore.ThreadedBatcher`2.BatcherThreadParam`2">
            <summary>
            Holds a delegate method, and an optional state parameter.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.BatcherThreadParam`2.CommonState">
            <summary>
            The common state to be shared across a set of threads.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.BatcherThreadParam`2.DelegateMethod">
            <summary>
            The delegate method to be shared across a set of threads.
            </summary>
        </member>
        <member name="F:PrimeFinderCore.ThreadedBatcher`2.BatcherThreadParam`2.SourceThreadId">
            <summary>
            The id of the source thread, if applicable.
            </summary>
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.BatcherThreadParam`2.#ctor(System.Int32,`2,`3)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimeFinderCore.ThreadedBatcher`2.BatcherThreadParam`2"/> struct.
            </summary>
        </member>
        <member name="T:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch">
            <summary>
            Represents a null batch, signifying the end of processing for a thread.
            </summary>
        </member>
        <member name="P:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch.Input">
            <inheritdoc />
        </member>
        <member name="P:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch.IsCompleted">
            <inheritdoc />
        </member>
        <member name="P:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch.Output">
            <inheritdoc />
        </member>
        <member name="M:PrimeFinderCore.ThreadedBatcher`2.SentinelBatch.Process">
            <inheritdoc />
        </member>
    </members>
</doc>
